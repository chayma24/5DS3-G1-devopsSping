pipeline {
    agent any

    tools {
        maven 'M2_HOME'
        jdk 'JAVA_HOME'
    }

    environment {
        MAVEN_OPTS = '-Xmx1024m'
        SONAR_TOKEN ='sonarcloud_token' 
        DOCKER_CONFIG_SECRET = 'docker_id'
        DOCKER_IMAGE_NAME = 'chayma24/5ds3-g1-devopsspring'
        GITHUB_REPO_URL = 'https://github.com/chayma24/5DS3-G1-devopsSping.git'
        GIT_BRANCH = 'ChaimaGharbi-5DS3-G1'
        SPRING_BOOT_PROJECT_NAME = '5DS3-G1-devopsSpring'
        PATH = "/Desktop/5DS3-G1-devopsSping/5DS3-G1-devopsSpring/docker-compose.yaml"
    }

    stages {
        stage('Clone') {
            steps {
                git url: "${env.GITHUB_REPO_URL}",
                    branch: "${env.GIT_BRANCH}",
                    credentialsId: 'jenkins_token_backend'
            }
        }

        stage('Build') {
            steps {
                dir(env.SPRING_BOOT_PROJECT_NAME) {
                    sh 'mvn clean package'
                }
            }
        }

        stage('Test') {
            steps {
                dir(env.SPRING_BOOT_PROJECT_NAME) {
                    sh 'mvn test -Dspring.profiles.active=test'
                }
            }
        }

        stage('Code Coverage') {
            steps {
                dir(env.SPRING_BOOT_PROJECT_NAME) {
                    sh 'mvn clean verify -Pcoverage' // Runs tests and generates JaCoCo report
                }
            }
        }

        stage('SonarCloud Analysis') {
    steps {
        withCredentials([string(credentialsId: env.SONAR_TOKEN, variable: 'SONAR_TOKEN')]) {
            dir(env.SPRING_BOOT_PROJECT_NAME) {
                // Run SonarCloud analysis
                sh '''
                mvn sonar:sonar \
                    -Dsonar.projectKey=chayma24 \
                    -Dsonar.organization=chayma24 \
                    -Dsonar.host.url=https://sonarcloud.io \
                    -Dsonar.login=$SONAR_TOKEN
                '''
            }
        }
    }
}


        stage('Archive JAR') {
            steps {
                dir("${env.SPRING_BOOT_PROJECT_NAME}/target") {
                    archiveArtifacts artifacts: '*.jar', fingerprint: true
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                dir(env.SPRING_BOOT_PROJECT_NAME) {
                    script {
                        def imageTag = "${env.DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}"

                        // Build the Docker image
                        docker.build(imageTag, "--build-arg JAR_FILE=*.jar .")

                        // Log in and push the Docker image
                        withCredentials([usernamePassword(credentialsId: env.DOCKER_CONFIG_SECRET, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sh 'echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin'
                            docker.image(imageTag).push()
                        }
                    }
                }
            }
        }
        
            stage('Deploy with Docker Compose') {
            steps {
                script {
                dir(env.PATH) {

                    sh 'docker-compose pull'

                    sh 'docker-compose up -d'
                }
                }
            }
        }
}    

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
        always {
            cleanWs() // Clean workspace after execution
        }
    }

}
