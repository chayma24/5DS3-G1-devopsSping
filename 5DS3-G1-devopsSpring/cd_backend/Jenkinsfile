pipeline {
    agent any

    environment {
        UPSTREAM_PIPELINE = 'ci pipeline'
        SPRING_BOOT_PROJECT_NAME = '5DS3-G1-devopsSpring'
        GITHUB_REPO_URL = 'https://github.com/chayma24/5DS3-G1-devopsSping.git'
        GIT_BRANCH = 'ChaimaGharbi-5DS3-G1'
        JKNS_GH_CRD_ID ='jenkins_token_backend'
        CD_JENKINSFILE_GH_PATH = '5DS3-G1-devopsSpring/cd_backend/Jenkinsfile'
        DOCKERFILE_GH_PATH = '5DS3-G1-devopsSpring/Dockerfile'
        DOCKER_CONFIG_SECRET = 'docker_id'
        DOCKER_IMAGE_NAME = 'chayma24/5ds3-g1-devopsspring'
    }

    parameters {
        string(name: 'JAR_FILE', defaultValue: '', description: "JAR file location from ${env.UPSTREAM_PIPELINE} pipeline")
        string(name: 'ciBuildNumber', defaultValue: '', description: "Build number from ${env.UPSTREAM_PIPELINE} pipeline")
    }

    stages {
        stage('Checkout Sparse') {
            steps {
                script {
                    checkout([$class: 'GitSCM',
                        branches: [[name: "*/${env.GIT_BRANCH}"]],
                        userRemoteConfigs: [[
                            url: "${env.GITHUB_REPO_URL}",
                            credentialsId: "${env.JKNS_GH_CRD_ID}"
                        ]],
                        extensions: [
                            [$class: 'SparseCheckoutPaths',
                                sparseCheckoutPaths: [[path: "${env.CD_JENKINSFILE_GH_PATH}"],
                                                      [path: "${env.DOCKERFILE_GH_PATH}"]
                            ]
                        ]
                    ]
                    ]
                    )
                    
                }
            }
        }

        stage('Download JAR Artifact') {
    steps {
        script {
            def jarFile = params.JAR_FILE
            def ciBuildNumber = params.ciBuildNumber
            env.jarFileName = jarFile.substring(jarFile.lastIndexOf('/') + 1)

            if (jarFile == '' || ciBuildNumber == '') {
                error("Missing required parameters: JAR_FILE or ciBuildNumber")
            }

            echo "JAR file location: ${jarFile}"
            echo "Build Number: ${ciBuildNumber}"
            echo "JAR file name: ${env.jarFileName}"

            echo "About to copy artifacts from ${env.UPSTREAM_PIPELINE} with filter ${jarFile}"

            try {
                copyArtifacts(
                    projectName: env.UPSTREAM_PIPELINE,
                    selector: specific(ciBuildNumber),
                    filter: jarFile,
                    flatten: true,
                    target: env.SPRING_BOOT_PROJECT_NAME
                )
            } catch (Exception e) {
                error("Failed to copy artifacts: ${e.message}")
            }
        }
    }
}


        stage('Build Docker Image') {
            steps {
                dir(env.SPRING_BOOT_PROJECT_NAME) {
                    script {
                        def dockerBuildStatus = 'SUCCESS'
                        def startTime = System.currentTimeMillis()

                        try {
                            docker.build("${env.DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}", "--build-arg JAR_FILE=${env.jarFileName} .")
                        } catch (Exception e) {
                            dockerBuildStatus = 'FAILURE'
                            throw e
                        } finally {
                            def duration = (System.currentTimeMillis() - startTime) / 1000
                            env.DOCKER_BUILD_STATUS = dockerBuildStatus
                            env.DOCKER_BUILD_DURATION = "${duration} seconds"
                        }
                    }
                }
            }
        }

        stage('Push Docker Image') {
    steps {
        script {
            def dockerPushStatus = 'SUCCESS'
            def startTime = System.currentTimeMillis()

            try {
                // Use the token directly for Docker login
                withCredentials([string(credentialsId: env.DOCKER_CONFIG_SECRET, variable: 'DOCKER_TOKEN')]) {
                    sh 'echo "$DOCKER_TOKEN" | docker login --username chayma24 --password-stdin'
                }
                docker.image("${env.DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}").push()
            } catch (Exception e) {
                dockerPushStatus = 'FAILURE'
                throw e
            } finally {
                def duration = (System.currentTimeMillis() - startTime) / 1000
                env.DOCKER_PUSH_STATUS = dockerPushStatus
                env.DOCKER_PUSH_DURATION = "${duration} seconds"
            }
        }
    }
}
}
    post {
        always {
            script {
                env.DOCKER_CONFIG_SECRET = null
            }
        }
    }
}
